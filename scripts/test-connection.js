#!/usr/bin/env node

/**
 * Script para verificar se o SDK consegue se conectar √† API da Evolution.
 * Este √© um teste b√°sico de conex√£o usando as vari√°veis de ambiente.
 */

require('dotenv').config();
const { EvolutionAPI } = require('../dist');

// Obt√©m configura√ß√µes do .env
const API_URL = process.env.EVOLUTION_API_URL;
const API_KEY = process.env.EVOLUTION_API_KEY;
const INSTANCE_NAME = process.env.EVOLUTION_API_INSTANCE;

if (!API_URL || !INSTANCE_NAME) {
  console.error('‚ùå Erro: URL da API e nome da inst√¢ncia s√£o obrigat√≥rios.');
  console.error('Configure as vari√°veis EVOLUTION_API_URL e EVOLUTION_API_INSTANCE no arquivo .env');
  process.exit(1);
}

console.log('üîç Verificando conex√£o com Evolution API');
console.log(`URL: ${API_URL}`);
console.log(`Inst√¢ncia: ${INSTANCE_NAME}`);
console.log(`API Key: ${API_KEY ? '********' : 'N√£o configurada'}`);

// Inicializa SDK
const api = new EvolutionAPI({
  baseUrl: API_URL,
  apiKey: API_KEY,
  debug: true
});

// Define inst√¢ncia
api.instance.setInstance(INSTANCE_NAME);

// Tenta obter estado da conex√£o
console.log('\nüì° Verificando estado da conex√£o...');

api.instance.getConnectionState()
  .then(response => {
    console.log(`‚úÖ Conex√£o bem sucedida! Estado: ${response.state || 'desconhecido'}`);
    console.log('Detalhes da resposta:', JSON.stringify(response, null, 2));
  })
  .catch(error => {
    console.error('‚ùå Falha na conex√£o!');
    if (error.response?.data) {
      console.error('Detalhes do erro:', JSON.stringify(error.response.data, null, 2));
    } else {
      console.error('Mensagem de erro:', error.message);
    }
    
    if (error.statusCode === 401) {
      console.log('\n‚ö†Ô∏è  Erro de autentica√ß√£o (401). Poss√≠veis causas:');
      console.log('1. API Key inv√°lida ou n√£o fornecida');
      console.log('2. API requer autentica√ß√£o');
      console.log('\nSolu√ß√£o: Configure a vari√°vel EVOLUTION_API_KEY no arquivo .env');
    }
  });
